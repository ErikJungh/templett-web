{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let AnimateIncrementDirective = /*#__PURE__*/(() => {\n  class AnimateIncrementDirective {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.finalValue = 0;\n      this.animated = false;\n    }\n    ngOnInit() {\n      this.observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && !this.animated) {\n            this.animateValue(0, this.finalValue);\n            this.animated = true;\n            this.observer?.unobserve(this.elementRef.nativeElement);\n          }\n        });\n      });\n      this.observer.observe(this.elementRef.nativeElement);\n    }\n    ngOnDestroy() {\n      this.observer?.disconnect();\n    }\n    animateValue(start, end) {\n      let current = start;\n      const increment = Math.ceil(end / 100); // Adjust increment value for smoother animation\n      const interval = setInterval(() => {\n        current += increment;\n        if (current >= end) {\n          current = end;\n          clearInterval(interval);\n        }\n        this.elementRef.nativeElement.textContent = current.toString(); // Update element with the current value\n      }, 20); // Adjust the interval for desired animation speed\n    }\n    static #_ = this.ɵfac = function AnimateIncrementDirective_Factory(t) {\n      return new (t || AnimateIncrementDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: AnimateIncrementDirective,\n      selectors: [[\"\", \"animateIncrement\", \"\"]],\n      inputs: {\n        finalValue: [\"animateIncrement\", \"finalValue\"]\n      }\n    });\n  }\n  return AnimateIncrementDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}